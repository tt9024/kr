import numpy as np
import mts_util
import dill
import Pop
import ar1_md
import datetime
import yaml

def get_sw(strat_name, sw_file = '/home/mts/upload/STRATEGY_WEIGHTS.yaml', str_code = 'TSC'):
    with open(sw_file, 'r') as f:
        sw = yaml.safe_load(f)
        return float(sw[strat_name+'_'+str_code])

def read_ar1_config(fname_cfg) :
    param = {}
    cfg = mts_util.MTS_Config(fname_cfg)
    param['strategy_key'] = cfg.get('strategy_key')
    param['sw'] = get_sw(param['strategy_key'])
    param['trd_day'] = cfg.get('trade_date')
    param['strat_code'] = cfg.get('strategy_code')
    cstr = 'live_output.WTI_N1.'
    param['mpos'] = cfg.get(cstr+'.max_position')
    param['min_trade'] = cfg.get(cstr+'.min_trade')
    param['trading_hour'] = cfg.getArr(cstr+'.trading_hour', type_func=float)
    cstr += 'parameters.'
    pkeys = [('n', int),('barsec', int),('trigger_cnt',int),('tscale',float),('mpscale',float),('w_pos', int),('clp_ratio',float)]
    pkeys_arr = [('ixf',int),('ixf_st',int),('pick',int)]
    for (key,tp) in pkeys :
        param[key] = cfg.get(cstr+key, type_func=tp)
    for (key,tp) in pkeys_arr:
        param[key] = cfg.getArr(cstr+key, type_func=tp)
    exec_key = cstr+'execution'
    exec_len = cfg.arrayLen(exec_key)
    param['execution'] = []
    ekeys = [('k0',int), ('k1', int), ('fscale_st', float), ('tscale_st',float)]
    for i in np.arange(int(exec_len)) :
        exec_dict = {}
        for (key,tp) in ekeys:
            k = exec_key + '[%i].%s'%(i,key)
            exec_dict[key] = cfg.get(k,type_func=tp)
        param['execution'].append(exec_dict)

    return param

def gen_trigger_time(stdv, barsec, cnt, min_diff=15) :
    n = len(stdv)
    N = n*barsec
    cnt0 = int(N/min_diff/2)  # pick a block of every other one
    pdf = np.tile(stdv**2,(barsec,1)).flatten()
    pdf = pdf[(np.linspace(1,N-1,cnt0)+0.5).astype(int)]
    pdf/=np.sum(pdf)
    k = np.random.choice(np.arange(cnt0).astype(int), size=cnt, replace=False, p=pdf)
    x = (k*(min_diff*2)+np.random.rand(cnt)*min_diff).astype(int)
    zix = np.nonzero(x%barsec==0)[0]
    x=np.delete(x,zix)
    x.sort()
    return x

def NullLogger(log_str) :
    pass

def get_pos(f, v, p0, tscale=1.8, mpscale=0.1, n=276, w_pos = 5, f_st=None, v_st=None, k0_k1_st=[(0,60,1,1), (144,160,1,1), (174,209,1.0,0.9),(270,276,1,1)] ,clp_ratio=0.7, use_k = None, logfunc=NullLogger):
    nf = 12
    w = np.r_[np.linspace(0.5,2,w_pos), np.linspace(2, 0.1, nf-w_pos)]
    w/=np.sum(w)
    t0 = np.ones(nf+1)*0.003992*tscale

    pp0 = [p0]
    logfunc( str(('in pop ' , datetime.datetime.now())))

    for i, (f0, v0) in enumerate(zip(f,v)):
        pp = Pop.opt(pp0[-1],f0,v0, t0, w)
        logfunc (str(('calling Pop with  ', pp0[-1], 'f0: ', f0, ' got ' ,pp)))
        if f_st is not None :
            if use_k is None :
                k = i%n
            else :
                k = use_k
            for (k0, k1, fscale_st, tscale_st) in k0_k1_st:
                if k in np.arange(k0,k1).astype(int):
                    pp_st = Pop.opt(pp0[-1],f_st[i,:],v_st[i,:], t0*tscale_st, w)
                    logfunc (str(('calling Pop_st with  ', pp0[-1],f_st[i,:], v_st[i,:], ' got ', pp_st)))
                    pp[0] = pp_st[0]*fscale_st + pp[0]*(1-fscale_st)
                    break
        mp = 50.0*mpscale
        clp = 50*clp_ratio*mpscale

        logfunc(str(('calling final position: ', mp, clp, pp)))
        pp0.append(np.clip(np.tanh(pp[0]/mp)*mp,-clp,clp)/clp)

    logfunc(str(('return ', pp0)))
    return np.array(pp0)

def get_pos_param(f, v, p0, param, f_st=None, v_st=None, use_k = None, logfunc=NullLogger) :
    tscale=  param['tscale']
    mpscale= param['mpscale']
    n= param['n']
    w_pos = param['w_pos']
    k0_k1_st = param['execution']
    clp_ratio = param['clp_ratio']

    k0_k1 = []
    for k01 in k0_k1_st:
        k0_k1.append( (k01['k0'], k01['k1'], k01['fscale_st'], k01['tscale_st']) )

    return get_pos(f, v, p0, \
            tscale=tscale, mpscale=mpscale, n=n, w_pos=w_pos, \
            f_st=f_st, v_st=v_st, \
            k0_k1_st=k0_k1, clp_ratio=clp_ratio, use_k = use_k, logfunc=logfunc)


def p0_from_stst(k, new_pos, prev_pos, prev_sz, exec_param, f_st, f_ss, ss_th_enter_flips=3, ss_th_cover_flips=0, ss0_th=5e-6, cover_k0=60, cover_k1=270, logfunc=NullLogger):
    """
    apply the rule for the execution.
    new_pos, prev_pos and prev_sz in the scale of maxpos
    f_st and f_ss, vector of nf

    returns the preferred position.
    """
    p0_new = new_pos
    if np.abs(p0_new - prev_pos) > 0.5 :
        # DAMP to avoid oscilation
        cur_sz = p0_new - prev_pos
        if prev_sz != 0 and prev_sz*cur_sz < 0 and np.abs(cur_sz) <= np.abs(prev_sz) :
            logfunc(str(('DAMP - prev_sz ', prev_sz, ' cur_sz ', cur_sz, 'not entering!')))
            p0_new = prev_pos
        else :
            logfunc(str(('check consistency (',k,') f_st:', f_st, ', f_ss: ', f_ss)))
            ss = np.sum(np.sign(f_st))

            # cover throttle
            ss0_th = 5e-6
            ss0 = np.sum(np.sign(f_ss-np.sign(f_ss)*ss0_th))
            nf = len(f_ss)
            ss_th_enter = nf-ss_th_enter_flips*2
            ss_th_cover = nf-ss_th_cover_flips*2

            if abs(p0_new) > abs(prev_pos):
                # entering position
                if (p0_new > 0 and ss <= -ss_th_enter) or (p0_new < 0 and ss >= ss_th_enter) :
                    logfunc(str(('short term ', str(f_st), ' ss', ss, ' not entering ', p0_new, ' from ', prev_pos)))
                    p0_new = prev_pos
            else :
                # covering (allow covering at eod/sod)
                if k > cover_k0 and k < cover_k1 :
                    if (prev_pos > 0 and ss0 >= ss_th_cover) or (prev_pos < 0 and ss0 <= -ss_th_cover) :
                        logfunc(str(('short term ', str(f_ss), ' ss', ss0, ' not covering ', p0_new, ' from ', prev_pos)))
                        p0_new = prev_pos
    return p0_new

def get_p0(k,f,v, pop2_obj, exec_param, check_stst=False, logfunc=NullLogger) :
    f_lt = []
    v_lt = []
    pk_st, pk_lt = exec_param['pick']

    pop2_obj.on_bar(k,f,v)
    for pk in [pk_st, pk_lt]:
        pop2_obj.pick = -pk
        f0, v0 = pop2_obj.gen_nf(exec_param['ixf'])
        f_lt.append(f0)
        v_lt.append(v0)
    
    flt = f.copy()
    flt[:3] = f_lt[1][:3]*4
    flt[3] = f_lt[1][3]
    flt[4] = f_lt[0][4]
    vlt = v

    pop2_obj.pick = -pk_lt
    f_st,v_st = pop2_obj.gen_nf(exec_param['ixf_st'])

    pop2_obj.pick = -pk_st
    f_ss,v_ss = pop2_obj.gen_nf(exec_param['ixf_st'])

    maxpos = float(exec_param['mpos'])
    prev_pos = pop2_obj.p0
    p0 = prev_pos/maxpos
    nf = len(f)
    pp0 = get_pos_param(flt.reshape((1,nf)),vlt.reshape((1,nf)),p0, exec_param, f_st=f_st.reshape((1,nf)), v_st=v_st.reshape((1,nf)), use_k = k, logfunc=logfunc)

    p0_new = pp0[-1] # in between [0,1]
    min_trd = int(exec_param['min_trade'])
    p0_new = np.sign(p0_new)*((np.abs(p0_new)*maxpos/min_trd+0.5).astype(int)*min_trd)

    # check the p0_new
    prev_sz = pop2_obj.prev_sz
    new_pos = p0_new
    if check_stst:
        new_pos = p0_from_stst(k, p0_new, prev_pos, prev_sz, exec_param, f_st, f_ss, logfunc=logfunc)

    pop2_obj.prev_sz = new_pos - prev_pos
    pop2_obj.p0 = new_pos
    return p0_new, flt, f_st,v_st

class AR1_Model :
    def __init__(self, logger, cfg_fname, fm=None, pop=None, dump_fname=None):
        self.logger = logger
        self.cfg_fname = cfg_fname
        self.fm = fm
        self.pop = pop
        self.dump_fd = None
        self.dump_fname =dump_fname

    def sod(self, trade_day=None, check_trade_day=True) :
        self.param = read_ar1_config(self.cfg_fname)
        self.logger.logInfo('read AR1 parameter:\n%s'%(str(self.param)))
        self.tdu = mts_util.TradingDayUtil()
        if trade_day is None:
            trade_day = self.tdu.get_trading_day_dt(datetime.datetime.now(), snap_forward=True)
        if check_trade_day :
            assert trade_day == self.param['trd_day'], 'trade day mismatch!'

        self.trd_day = trade_day
        self._load(trade_day)
        self.fm._init()
        self.pop.prev_sz = 0
        self.trigger_time = gen_trigger_time(self.fm.state_obj.std.v[0,:], self.param['barsec'], self.param['trigger_cnt'])

        self.n = int(self.param['n'])
        self.nf = len(self.param['ixf'])

        self.md = {} # key with bar_utc: 'bar': md_bar, 'snap': [ {'bar': md_bar, 'fv': [nf,3,2], 'p0': p0
        self.fv = np.zeros((self.n,3,self.nf,2))
        self.p0 = np.zeros((self.n))

    def _fm_fname(self, trade_day) :
        return'/home/mts/run/recovery/strat/TSC-7000-%s/fm_%s'%(self.param['strat_code'], trade_day)

    def _pop_fname(self, trade_day) :
        return '/home/mts/run/recovery/strat/TSC-7000-%s/pop_%s'%(self.param['strat_code'], trade_day)

    def _dump_fname(self, trade_day) :
        if self.dump_fname is None :
            self.dump_fname = '/home/mts/run/recovery/strat/TSC-7000-%s/dump_%s'%(self.param['strat_code'], trade_day)
        return self.dump_fname

    def _load(self, trd_day):
        if self.fm is None:
            with open(self._fm_fname(trd_day), 'rb') as fd:
                self.fm = dill.load(fd)
        if self.pop is None:
            with open(self._pop_fname(trd_day), 'rb') as fd:
                self.pop = dill.load(fd)
        self.dump_fd = open(self._dump_fname(trd_day), 'at')

    def _eod_dump(self) :
        trd_day=self.trd_day
        tdi = mts_util.TradingDayIterator(trd_day)
        tdi.begin()
        trd_day = tdi.next()
        with open(self._fm_fname(trd_day), 'wb') as fd:
            dill.dump(self.fm,fd)
        with open(self._pop_fname(trd_day), 'wb') as fd:
            dill.dump(self.pop,fd)
        if self.dump_fd is not None:
            self.dump_fd.close()

    @staticmethod
    def _to_array(k, a, p0, md_dict, f):
        curutc = int(datetime.datetime.now().strftime('%s'))
        d=np.array([curutc, k, a, p0])
        d = np.r_[d, ar1_md.md_dict_to_array(md_dict), f]
        return d

    @staticmethod
    def _from_array(d, nf=12) :
        curutc, k, a, p0 = d[:4]
        md_dict = ar1_md.md_dict_from_array(d[4:-nf])
        f=d[-nf:]
        return int(curutc),int(k),a,p0,md_dict,f

    @staticmethod
    def _from_file(dump_fname, nf=12) :
        da = np.genfromtxt(dump_fname, delimiter=',')
        utc = da[:,0].astype(int)
        k = da[:,1].astype(int)
        a = da[:,2]
        p0 = da[:,3].astype(int)
        md_dict = ar1_md.md_dict_from_array_multiday(da[:,4:-nf])
        f=da[:,-nf:]
        return utc, k, a, p0, md_dict, f

    def _dump_log(self, k, a, p0, md_dict, f):
        d=AR1_Model._to_array(k,a,p0,md_dict,f)
        d=d.reshape((1,len(d)))
        np.savetxt(self.dump_fd, d, delimiter=',')
        self.dump_fd.flush()

    def eod(self) :
        self.fm.on_eod()
        self.pop.eod_noscale()
        self._eod_dump()

    def on_snap(self, k, a, md_dict):
        f,v=self.fm.on_snap(k,a,md_dict)
        p0, flt, fst, vst = get_p0(k,f,v,self.pop,self.param,logfunc=self.logger.logInfo)
        #self.logger.logInfo('on snap (%i,%f): %f'%(k,a,p0))
        self._dump_log(k,a,p0,md_dict,f)
        return p0

    def on_bar(self, k, md_dict):
        p0 = self.on_snap(k,1,md_dict)
        self.fm.on_bar(k, md_dict)
        return p0

